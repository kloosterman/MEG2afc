function pupil = MEG2afc_import_pupil_file(filename, startRow, endRow)
% function [VarName1,pupil_baseline,pupil_decision,pupil_feedback,pupil_trial,rt,run_nr,trial_nr] = MEG2afc_import_pupil_file(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [VARNAME1,PUPIL_BASELINE,PUPIL_DECISION,PUPIL_FEEDBACK,PUPIL_TRIAL,RT,RUN_NR,TRIAL_NR]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [VARNAME1,PUPIL_BASELINE,PUPIL_DECISION,PUPIL_FEEDBACK,PUPIL_TRIAL,RT,RUN_NR,TRIAL_NR]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [VarName1,pupil_baseline,pupil_decision,pupil_feedback,pupil_trial,rt,run_nr,trial_nr]
%   = importfile('nk11_A_pupil_data.csv',2, 801);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/07/06 14:00:08

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
% pupil.counter = dataArray{:, 1};
% pupil.baseline = dataArray{:, 2};
% pupil.decision = dataArray{:, 3};
% pupil.feedback = dataArray{:, 4};
% pupil.trial = dataArray{:, 5};
% pupil.rt = dataArray{:, 6};
% pupil.run_nr = dataArray{:, 7};
% pupil.trial_nr = dataArray{:, 8};

% pupil = struct('counter', dataArray{:, 1}, 'baseline', dataArray{:, 2}, 'decision', dataArray{:, 3}, 'feedback', dataArray{:, 4}, ...
%     'trial', dataArray{:, 5}, 'rt', dataArray{:, 6}, 'run_nr', dataArray{:, 7}, 'trial_nr', dataArray{:, 8});
% 
evcell = cell(length(dataArray{:, 1}),1);
pupil = struct('counter', evcell, 'baseline', evcell, 'decision', evcell, 'feedback', evcell, ...
    'trial', evcell, 'rt', evcell, 'run_nr', evcell, 'trial_nr', evcell);
for i=1:length(dataArray{:, 1})
    pupil(i).counter = dataArray{:, 1}(i);
    pupil(i).baseline = dataArray{:, 2}(i);
    pupil(i).decision = dataArray{:, 3}(i);
    pupil(i).feedback = dataArray{:, 4}(i);
    pupil(i).trial = dataArray{:, 5}(i);
    pupil(i).rt = dataArray{:, 6}(i);
    pupil(i).run_nr = dataArray{:, 7}(i);
    pupil(i).trial_nr = dataArray{:, 8}(i);
end
