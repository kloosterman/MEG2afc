function NKdet_freqanalysis(cfg1, cfg2, inputfile, outputfile)% do freqanalysis, called by MIBexp_TFR_analysis_peersetupif isempty(cfg1.trials)  disp('Condition not present in data\n')  returnendmkdir(fileparts(outputfile));fprintf('Loading %s\n', inputfile);switch cfg1.phaselocktype  case 'totalpow'        load(inputfile);        %         % Robust detrend    %         for itrial=1:length(data.trial)    %             data.trial{itrial} = transpose(nt_detrend(data.trial{itrial}', 2));    %         end    if cfg1.sourceloc == 0      cfg = [];      cfg.method = 'distance';      cfg.channel = 'MEG';      neighbours = ft_prepare_neighbours(cfg, data);      cfg=[];      cfg.planarmethod = 'sincos';      cfg.neighbours = neighbours;      data = ft_megplanar(cfg, data);    end      case { 'evoked'}            %'induced' subtract trial average per condition! from each trial        datadir = fileparts(inputfile);    cd(datadir)    loadfiles = dir('*data.mat');    alldata={};    for ifile = 1:length(loadfiles)      load(loadfiles(ifile).name);      %             % Robust detrend      %             for itrial=1:length(data.trial)      %                 data.trial{itrial} = transpose(nt_detrend(data.trial{itrial}', 2));      %             end      cfg = [];      cfg.method = 'distance';      cfg.channel = 'MEG';      neighbours = ft_prepare_neighbours(cfg, data);      cfg=[];      cfg.planarmethod = 'sincos';      cfg.neighbours = neighbours;      data = ft_megplanar(cfg, data);      alldata{ifile} = data;    end    data = ft_appenddata([], alldata{:});        cfg=[];    cfg.vartrllength = 2;        timelock = ft_timelockanalysis(cfg,data);        % delete all previous timelocks    disp('Deleting old timelocks, if any!')    list = dir('*_timelock.mat');    if ~isempty(list)      delete(list.name)    end        fprintf('Saving %s \n', [inputfile '_timelock.mat'])    save([inputfile '_timelock.mat'], 'timelock'); %        data = timelock; % freqanalysis done below    %         data.trial = {timelock.avg};   %prepare freqanalysis on the average trial    %         data.time = {timelock.time};        %         timelock = ft_combineplanar([], timelock);    %                         cfg = [];    %                         cfg.layout = 'CTF275.lay';       %CTF275_RH.lay neuromag306cmb neuromag306all neuromag306mag neuromag306planar CTF275_helmet.mat    %                         cfg.hotkeys = 'yes';    %                         cfg.fontsize = 18;    %                         cfg.xlim = [-1 2];    %                         f = figure;    %                         f.Position = [ 680   678   1200   1200];    %                         ft_multiplotER(cfg, timelock);          case 'induced' % TODO update    load(inputfile);        % synthetic planar computation    cfg              = [];    cfg.feedback     = 'no';    cfg.method       = 'template';    if ismac      cfg.template     = 'ctf275_neighb.mat';    else      cfg.template     = '/home/mpib/kloosterman/MATLAB/tools/fieldtrip-20170611/template/neighbours/ctf275_neighb.mat';    end    cfg.planarmethod = 'sincos';    cfg.channel      = {'MEG'};    cfg.trials       = 'all';    cfg.neighbours   = ft_prepare_neighbours(cfg, data);        data = ft_megplanar(cfg, data);        %     data_ERP1 = [];    %     cfg3=[];    %     for icond = 1:2    %       cfg3.trials = data.trialinfo(:,1) == icond;    %       tempdata = ft_selectdata(cfg3, data);    %       if any(cfg3.trials)    data = remove_ERP_fromdata(data, 'subtract'); % TODO add remove type to cfg    %       end    %     end    %     data = ft_appenddata([], data_ERP1{:});    data.cfg.previous = data.cfg; % log detrending done in cfg to keep overview    data.cfg = keepfields(data.cfg, 'previous');    data.cfg.funthatwasrun = 'remove_ERP_fromdata';    data.cfg.method = ['subtract'];  case 'induced_ntdetr' % TODO update    load(inputfile);        %         % Robust detrend    %         for itrial=1:lengt        h(data.trial)    %             data.trial{itrial} = transpose(nt_detrend(data.trial{itrial}', 2));    %         end    if cfg1.sourceloc == 0      cfg = [];      cfg.method = 'distance';      cfg.channel = 'MEG';      neighbours = ft_prepare_neighbours(cfg, data);      cfg=[];      cfg.planarmethod = 'sincos';      cfg.neighbours = neighbours;      data = ft_megplanar(cfg, data);    end        %         fprintf('Loading timelock %s. . .\n', [inputfile '_timelock.mat'])    cd(fileparts(inputfile))    list = dir('*_timelock.mat');    load(list(end).name) % take last,is endrun+1        data = remove_ERP_fromdata(data, 'nt_detrend', timelock);        %         ntrials = size(data.trialinfo,1);    %         for itrial = 1:ntrials    %             fprintf('Subtracting ERF for trial %d\n', itrial)    %             %                             startind = find(~timelock.time) - find(~data.time{itrial}) + 1;    %             %                             endind = startind + length(timelock.time) - 1    %             %                             %                             endind   = find(~timelock.time) + length(data.time{itrial}) - find(~data.time{itrial}) ; % timeindices: timelock_t=0 + last_sample_data - data_t=0 % select indices of timebins present in itrial    %             %                             data.trial{itrial} = data.trial{itrial} - timelock.avg(:,startind:endind); % subtract ERP from available total signal bins    %    %             startind = find(data.time{itrial} == timelock.time(1)); % find first ERF sample in trial    %             endind = length(timelock.time);    %             % find out how long trial is    %             trialdur = size(data.trial{itrial},2);    %             if trialdur < endind % if trial is shorter than timelock    %                 endind = trialdur;    %             end    %             data.trial{itrial} = data.trial{itrial}(:,startind:endind) - timelock.avg(:,1:endind); % subtract ERP from available total signal bins    %             data.time{itrial} = data.time{itrial}(:,startind:endind); % match trial's time axis    %         endendswitch cfg1.trigger  case 'resp'    cfg=[];    cfg.offset = -round((data.trialinfo(:,5) / ft_findcfg(data.cfg, 'origfs')) * ft_findcfg(data.cfg, 'resamplefs'));    data = ft_redefinetrial(cfg,data);endfreq = ft_freqanalysis(cfg1, data);freq = ft_combineplanar([], freq);%%[pathstr, name] = fileparts(outputfile);fprintf('Saving %s to...\n %s\n', name, pathstr)save(outputfile, 'freq');% clear all%% plotting% cfg = [];% cfg.layout = 'CTF275.lay';       %CTF275_RH.lay neuromag306cmb neuromag306all neuromag306mag neuromag306planar CTF275_helmet.mat% cfg.hotkeys = 'yes';% cfg.colorbar = 'yes';% cfg.fontsize = 18;% % cfg.zlim = 'maxabs';% % cfg.xlim = [-0.5 1.5];% load colormap_jetlightgray.mat;% cfg.colormap = cmap;% % cfg.baseline = [-0.4 0];% % cfg.baselinetype = 'relchange';% f = figure;% f.Position = [ 680   678   1200   1200];% ft_multiplotTFR(cfg, freq);% %%% cfg = [];% cfg.channel = 'MEG';% cfg.method = 'runica';% %  cfg.trials = 1; % testing% comp = ft_componentanalysis(cfg, data);% % cfg = [];% % %         cfg.layout = 'biosemi64_incI1I2.lay'; % specify the layout file that should be used for plotting% % %         cfg.layout = 'biosemi64.lay'; % specify the layout file that should be used for plotting% %         cfg.layout = 'elec1010.lay'; % specify the layout file that should be used for plotting% cfg.viewmode = 'vertical'; % component% %         cfg.channel = 1:50;       % specify the component(s) that should be plotted% % figure('Position', [69 58 774 1045])% ft_databrowser(cfg, comp)% f = gcf;% f.Position = [69 58 774 1045];% % cfg = [];% % cfg.component = [1:50];       % specify the component(s) that should be plotted% %         cfg.layout = 'biosemi64.lay'; % specify the layout file that should be used for plotting% %         cfg.layout = 'elec1010.lay'; % specify the layout file that should be used for plotting% cfg.layout = 'CTF275'% cfg.comment   = 'no';% figure('units','normalized','outerposition', [0.9995 0.0367 1 0.8775] )% ft_topoplotIC(cfg, comp)% % 