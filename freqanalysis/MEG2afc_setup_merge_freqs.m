function MEG2afc_setup_merge_freqs(freqanalysistype, trigger, phaselock_type)% Make jobs for each subject to concatenate runs and collect sessions% freqanalysistype = low, or full% restoredefaultpathif ismac  %     basepath = '/Users/kloosterman/gridmaster2012/kloosterman'; % on the cluster    %     basepath = '/Volumes/LNDG/user/Niels/MEG2afc'; % on the server  basepath = '/Users/kloosterman/beegfs/projectdata/MEG2afc/'; %yesno or 2afc    %     backend = 'parfor'; % local torque parfor  backend = 'local'; %  torque parforelse  %     basepath = '/home/mpib/kloosterman'; % on the cluster  basepath = '/home/beegfs/kloosterman/projectdata/MEG2afc/'; %yesno or 2afc    %     addpath(fullfile(basepath, 'MATLAB',  'tools/qsub_tardis'))%   backend = 'torque'; % local torque  backend = 'slurm'; % local torque  %     backend = 'parfor'; % local torque parfor  backend = 'local'; %  torque parfor  end% addpath(genpath(fullfile(basepath, 'MATLAB',   'MEG_HH_analysis')))% rmpath(genpath(fullfile(basepath, 'MATLAB', 'MEG_HH_analysis/.git/')))% addpath(fullfile(basepath, 'MATLAB', 'tools', 'fieldtrip-20161220')) %inc JJ edit ft_artifact_zvalue% ft_defaults%%overwrite = 1;compile = 'no';if strcmp (freqanalysistype, 'full')    memreq = 14000;else    memreq = 6000;endtimreq = 20*60; % in sec%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SUBJ  = { %     'NK1'  'NK2'  'NK3'   'NK4'      'NK5'   'NK7'   'NK8'   'NK9'  'NK11'  'NK12'   'NK13'   'NK14' 'NK15'...%          'NK16'     'NK17'      'NK18'      'NK19'     'NK20'       'NK21'%     }; %  'NK6' out,  'NK10' don't exist, 'NK2' incomplete  'NK12' 'NK15' have bad ddm fitsSUBJ  = {        'NK19'       'NK20'       'NK21'    }; %  'NK6' out,  'NK10' don't exist, 'NK2' incompleteif ismac%     PRE = '/Users/kloosterman/gridmaster2012/kloosterman';    PRE = '/Users/kloosterman/beegfs/projectdata/MEG2afc';%     PRE = '/Volumes/LNDG/user/Niels/MEG2afc'; % on the serverelse    PRE = '/home/beegfs/kloosterman/projectdata/MEG2afc';%     addpath(fullfile(PRE, 'MATLAB'))%     MEG2afc_setup_pathsend% PREIN = fullfile(PRE, 'projectdata/MEG2afc/freq', freqanalysistype, trigger);PREIN = fullfile(PRE, 'freq', freqanalysistype, trigger);subjdirlist = cell(length(SUBJ),1); triggerlist = cell(length(SUBJ),1); freqanalysistypelist = cell(length(SUBJ),1);phaselock_typelist = cell(length(SUBJ),1);for isub = 1:length(SUBJ)    baselinetype = 'respavg_baselinepersession'; % or respavg_baseline_acrosssessions    baseline='trial';    respavgout = fullfile(fullfile(PREIN, SUBJ{isub}), baselinetype, phaselock_type);    mkdir(respavgout)    filesave = fullfile(respavgout, [SUBJ{isub} '_' baseline '.mat']);    if exist(filesave, 'file') && not(overwrite)        fprintf('%s exists, skipping\n', filesave)        continue    end    fprintf('Adding subject %s %sfreq trials . . . \n', SUBJ{isub}, freqanalysistype)    subjdirlist{isub} = fullfile(PREIN, SUBJ{isub});    triggerlist{isub} = trigger;    phaselock_typelist{isub} = phaselock_type;    freqanalysistypelist{isub} = freqanalysistype;endfun2run = str2func('MEG2afc_merge_freqs');switch backend    case 'local'        cellfun(fun2run, subjdirlist, freqanalysistypelist, triggerlist, phaselock_typelist);    case 'peer'        peercellfun(fun2run, subjdirlist, freqanalysistypelist, triggerlist, phaselock_typelist);    case {'torque' 'qsublocal' 'slurm'}        setenv('TORQUEHOME', 'yes')        mkdir('~/qsub'); cd('~/qsub');        if strcmp(backend, 'slurm')          %       options = '-D. -c2 --gres=gpu:1';          options = '-D. -c2';        else          options =  '-l nodes=1:ppn=1'; % torque %-q testing or gpu        end                switch compile            case 'no'%                 nnodes = 30; % how many licenses available?%                 stack = round(length(cfg(:))/nnodes); % only used when not compiling                 qsubcellfun(fun2run, subjdirlist, freqanalysistypelist, triggerlist, phaselock_typelist, 'memreq', memreq, 'timreq', timreq*60, ...                    'stack', 2, 'StopOnError', false, 'backend', backend, 'options', options);                            case 'yes'%                 compiledfun = qsubcompile(fun2run, 'toolbox', {'stats', 'signal'});                 compiledfun = qsubcompile(fun2run, 'toolbox', {'stats', 'signal'}, 'executable', 'run_kloosterman_master_p26355_b5.sh' );                  qsubcellfun(compiledfun, subjdirlist, freqanalysistypelist, triggerlist, phaselock_typelist, 'memreq', memreq, 'timreq', timreq*60, ...                    'stack', 1, 'StopOnError', false, 'backend', backend, 'options', options, ...                    'UniformOutput', false );        end    case 'parfor'        parfor ibatch = 1:length(subjdirlist(:))            fun2run(subjdirlist{ibatch}, freqanalysistypelist{ibatch}, triggerlist{ibatch})        end    otherwise        error('Unknown backend, aborting . . .\n')end% % %Submit jobs% fprintf('Running MEG2afc_concat_runs for %d subjects\n', length(subjdirlist))% setenv('TORQUEHOME', 'yes')  %    yes or ''% mkdir('~/qsub'); cd('~/qsub');% % nnodes = length(SUBJ); % how many jobs?% stack = round(length(subjdirlist)/nnodes);% % % qsubcellfun(fun2run, subjdirlist, freqanalysistypelist, triggerlist, phaselock_typelist, 'memreq', 5, 'timreq', timreq*60, ...% % %     'stack', stack, 'StopOnError', true, 'backend', backend, 'options', '-l nodes=1:ppn=1', 'matlabcmd', 'matlab');% % cd('~/qsub');% % % % % % save(['argout_' datestr(now)], 'argout')% cellfun(fun2run, subjdirlist, freqanalysistypelist, triggerlist, phaselock_typelist, 'UniformOutput', false);% % cd ~% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%