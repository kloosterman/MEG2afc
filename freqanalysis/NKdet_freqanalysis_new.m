function NKdet_freqanalysis(cfg1, cfg2, inputfile, outputfile)	% TODO load in all data structs per sess, concatatenate	cd(inputfolder)	runlist = dir('*data.mat');	nruns = length(runlist);	alldata = cell(1,nruns);	for irun = 1:nruns		load(runlist(irun).name);		alldata{irun} = data;	end	data = ft_appenddata([], alldata{:})				if isempty(cfg1.trials)		disp('Condition not present in data\n')		return	end	% mkdir(fileparts(outputfile));	% fprintf('Loading %s\n', inputfile);	switch cfg1.phaselocktype	case 'totalpow'    		load(inputfile);    		%         % Robust detrend		%         for itrial=1:length(data.trial)		%             data.trial{itrial} = transpose(nt_detrend(data.trial{itrial}', 2));		%         end		if cfg1.sourceloc == 0			cfg = [];			cfg.method = 'distance';			cfg.channel = 'MEG';			neighbours = ft_prepare_neighbours(cfg, data);			cfg=[];			cfg.planarmethod = 'sincos';			cfg.neighbours = neighbours;			data = ft_megplanar(cfg, data);		end    	case { 'evoked'}            %'induced' subtract trial average per condition! from each trial    		datadir = fileparts(inputfile);		cd(datadir)		loadfiles = dir('*data.mat');		alldata={};		for ifile = 1:length(loadfiles)			load(loadfiles(ifile).name);			%             % Robust detrend			%             for itrial=1:length(data.trial)			%                 data.trial{itrial} = transpose(nt_detrend(data.trial{itrial}', 2));			%             end			cfg = [];			cfg.method = 'distance';			cfg.channel = 'MEG';			neighbours = ft_prepare_neighbours(cfg, data);			cfg=[];			cfg.planarmethod = 'sincos';			cfg.neighbours = neighbours;			data = ft_megplanar(cfg, data);			alldata{ifile} = data;		end		data = ft_appenddata([], alldata{:});    		cfg=[];		cfg.vartrllength = 2;    		timelock = ft_timelockanalysis(cfg,data);    		% delete all previous timelocks		disp('Deleting old timelocks, if any!')		list = dir('*_timelock.mat');		if ~isempty(list)			delete(list.name)		end    		fprintf('Saving %s \n', [inputfile '_timelock.mat'])		save([inputfile '_timelock.mat'], 'timelock'); %    		data = timelock; % freqanalysis done below    	end  % run freqanalysis and avg trials over relevant dimensions	for itrig = 1:2 % stim then resplocked		if itrig == 2			cfg=[];			cfg.offset = -round((data.trialinfo(:,5) / ft_findcfg(data.cfg, 'origfs')) * ft_findcfg(data.cfg, 'resamplefs'));			data = ft_redefinetrial(cfg,data);			cfg.toi = [CHECK]		end		freqtrl = ft_freqanalysis(cfg1, data);		freqtrl = ft_combineplanar([], freqtrl);				% prepallocate trl averaged freq		nchan = length(freqtrl.label);						freq = freqtrl;		freq.dimord = 'chan_freq_time_diff_mod'; % difficulty, mod/latr's		freq.powspctrm = nan( [ size(freqtrl.powspctrm, 2:4) 2 3 ] ))		% average conditions		for idiff = 1:2 % easy, hard			% do modulation, lateralization wrt stim, lateralization wrt resp, 			cfg = [];			cfg.trials = freqtrl.trialinfo(:,CHECK) == idiff;			cfg.avgovertrials = 'yes';			frqtmp = ft_selectdata(cfg, freqtrl);			freq.powspctrm(:,:,:,idiff,1) = freqtmp.powspctrm;						%TODO same for latr's, see loadrespavg script								end		freqout{itrig} = freq;	end	%%	[pathstr, name] = fileparts(outputfile);	fprintf('Saving %s to...\n %s\n', name, pathstr)	save(outputfile, 'freqout');	% %% plotting	% cfg = [];	% cfg.layout = 'CTF275.lay';       %CTF275_RH.lay neuromag306cmb neuromag306all neuromag306mag neuromag306planar CTF275_helmet.mat	% cfg.hotkeys = 'yes';	% cfg.colorbar = 'yes';	% cfg.fontsize = 18;	% cfg.zlim = 'maxabs';	% cfg.xlim = [-0.5 1.5];	% load colormap_jetlightgray.mat;	% cfg.colormap = cmap;	% cfg.baseline = [-0.4 0];	% cfg.baselinetype = 'relchange';	% f = figure;	% f.Position = [ 680   678   1200   1200];	% ft_multiplotTFR(cfg, freqnew);	% %%	% cfg = [];	% cfg.channel = 'MEG';	% cfg.method = 'runica';	% %  cfg.trials = 1; % testing	% comp = ft_componentanalysis(cfg, data);	% 	% cfg = [];	% % %         cfg.layout = 'biosemi64_incI1I2.lay'; % specify the layout file that should be used for plotting	% % %         cfg.layout = 'biosemi64.lay'; % specify the layout file that should be used for plotting	% %         cfg.layout = 'elec1010.lay'; % specify the layout file that should be used for plotting	% cfg.viewmode = 'vertical'; % component	% %         cfg.channel = 1:50;       % specify the component(s) that should be plotted	% % figure('Position', [69 58 774 1045])	% ft_databrowser(cfg, comp)	% f = gcf;	% f.Position = [69 58 774 1045];	% 	% cfg = [];	% 	% cfg.component = [1:50];       % specify the component(s) that should be plotted	% %         cfg.layout = 'biosemi64.lay'; % specify the layout file that should be used for plotting	% %         cfg.layout = 'elec1010.lay'; % specify the layout file that should be used for plotting	% cfg.layout = 'CTF275'	% cfg.comment   = 'no';	% figure('units','normalized','outerposition', [0.9995 0.0367 1 0.8775] )	% ft_topoplotIC(cfg, comp)	% 	% 