function [trl, event] = sortTrials_MEGhh_yesno(cfg)% columns trl matrix:% 1 trial start% 2 trial end% 3 trial offset% 4 noise condition% 5 signal presence% 6 button% 7 correct% 8 RT% 9 Confidence% 10 trial indexhdr    = cfg.headerfile;fsr    = cfg.fsample;         % in Hztrg    = cfg.trialdef.trg;    % 'stim' or 'resp' or 'baseline'begtrl = cfg.trialdef.begtim; % in secondsendtrl = cfg.trialdef.endtim; % in seconds[event]= ft_read_event(hdr); %normal% if ~isempty(event)%     fprintf('Saving events to %s\n', fifevent)%     save(fifevent, 'event')% else%     fprintf('No events found in %s, aborting\n', fifevent)%     return% endtrgval1 = [event(find(strcmp('UPPT001',{event.type}))).value];trgsmp1 = [event(find(strcmp('UPPT001',{event.type}))).sample];trgval2 = [event(find(strcmp('UPPT002',{event.type}))).value];trgsmp2 = [event(find(strcmp('UPPT002',{event.type}))).sample];% 2AFC:% self.p_run_start = 127% self.p_run_end = 126% self.p_block_start = 31% self.p_block_end = 30% self.p_baseline = 8% self.p_choice_missed = 2% self.p_stimulus_left_easy = 16% self.p_stimulus_left_diff = 17% self.p_stimulus_right_easy = 18% self.p_stimulus_right_diff = 19% self.p_left_error = 32% self.p_left_correct = 33% self.p_right_error = 34% self.p_right_correct = 35% %yesno:% self.p_run_start = 127% 		self.p_run_end = 126% 		self.p_block_start = 31% 		self.p_block_end = 30% 		self.p_baseline = 8% 		self.p_stimulus_absent_noise1 = 16% 		self.p_stimulus_absent_noise4 = 17% 		self.p_stimulus_present_noise1 = 18% 		self.p_stimulus_present_noise4 = 19% 		self.p_left_error = 32% 		self.p_left_correct = 33% 		self.p_right_error = 34% 		self.p_right_correct = 35% 		self.p_confidence_onset = 4% 		self.p_confidence1 = 64% 		self.p_confidence2 = 65% 		self.p_confidence3 = 66% 		self.p_confidence4 = 67trig_ind_stim = find(trgval1 > 15 & trgval1 < 20); % stim onset triggerstrig_ind_resp = find(trgval1 > 31 & trgval1 < 36); % stim onset triggerstrig_ind_conf = find(trgval1 > 63 & trgval1 < 68); % stim onset triggerstrl = trgsmp1(trig_ind_stim)' + begtrl*fsr; % find stim onset samples%% find corresponding confidence reports of all stim onsetsctr=1;for ibutton = trig_ind_conf  % use conf report for determining trial end      button_smp1 = trgsmp1(ibutton);  % report sample # according to channel 1   button_smp2 = trgsmp2(find(trgsmp2 < button_smp1, 1, 'last'));    jitter(ctr) = button_smp1 - button_smp2;   trl(ctr,2) = button_smp2 + endtrl*fsr;      cur_val = trgval1(ibutton); % add stimulus type noise1 or noise2   if cur_val == 64       trl(ctr,9) = 0;   elseif cur_val == 65          % confidence 1-4       trl(ctr,9) = 1;   elseif cur_val == 66          % confidence 1-4       trl(ctr,9) = 2;   elseif cur_val == 67          % confidence 1-4       trl(ctr,9) = 3;   end      ctr = ctr+1;endif any(jitter) > 100    warning('Offset between resp triggers in triggerchans 1 and 2 > 100 samples')end    trl(:,3) = begtrl*fsr;ctr=1;for istim = trig_ind_stim % find out stim specifics        cur_val = trgval1(istim); % add stimulus type noise1 or noise2    if cur_val == 16 || cur_val == 18        trl(ctr,4) = 0;    elseif cur_val == 17 || cur_val == 19        trl(ctr,4) = 1;    end        if cur_val == 16 || cur_val == 17        % signal present or absent        trl(ctr,5) = 0;    elseif cur_val == 18 || cur_val == 19        trl(ctr,5) = 1;    end   ctr = ctr+1;endctr=1;for iresp = trig_ind_resp % find out resp specifics        button_smp1 = trgsmp1(iresp);  % RT based on resp channel 2 and stim chan1    button_smp2 = trgsmp2(find(trgsmp2 < button_smp1, 1, 'last'));%     trl(ctr,8) = (button_smp2 + endtrl*fsr) - trl(ctr,1);     trl(ctr,8) = button_smp2 - (trl(ctr,1) - begtrl*fsr);           cur_val = trgval1(iresp);    % button pressed NOT choice yet: left or right button    if cur_val == 32 || cur_val == 33        trl(ctr,6) = 0;    elseif cur_val == 34 || cur_val == 35        trl(ctr,6) = 1;    end    if cur_val == 32 || cur_val == 34        trl(ctr,7) = 0;    elseif cur_val == 33 || cur_val == 35        trl(ctr,7) = 1;    end   ctr = ctr+1;endtrl(:,10) = 1:size(trl,1); % trial index   