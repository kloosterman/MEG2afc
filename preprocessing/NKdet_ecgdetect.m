function NKdet_ecgdetect(cfg1, outputfile)% called by MIBexp_freqanalysis_peersetup% triggers: baseline, stim or resp% warning off%[pathstr, outname] = fileparts(outputfile);mkdir(pathstr);fprintf('Outpath: %s\n', pathstr)try    switch cfg1.runcfg.preproc.loaddata        case 'yes'            load(fullfile(cfg1.runcfg.preproc.loaddatapath, cfg1.runcfg.PRE, outname))        case 'no'            cfg1 = ft_definetrial(cfg1); % define trials and plot trl            cfg1.trl = [ cfg1.trl(1,1) cfg1.trl(end,2) 0]; %take all data from start to end of run            data = ft_preprocessing(cfg1); % preprocess and save    end%     cfg=[];%     cfg.hpfilter      = 'yes';%     cfg.hpfreq        = 0.5;%     cfg.hpinstabilityfix = 'reduce'; % filter order from 6 to 5%     data = ft_preprocessing(cfg, data); % preprocess and save        artfctdef=[];    if strcmp(cfg1.artfrej, 'yes')        if strcmp(cfg1.loadartf, 'yes')            load(fullfile('/mnt/homes/home020/meindertsmat/data/MEG/preproc/', cfg1.runcfg.PRE, [outname '_preprocinfo']))            artfctdef = preprocinfo.artfctdef;        else % run artifact routines            close all            % %             MIBexp_artefact_visual            cfg_rej = [];            cfg_rej.artfctdef = artfctdef;            cfg_rej.artfctdef.reject = 'complete';% %             cfg_rej.artfctdef.crittoilim = [-0.7 2];%             %             cfg_rej.artfctdef.crittoilim = [zeros(size( data.trialinfo,1),1)-0.7  data.trialinfo(:,8-3)/1200+0.5];% %             MIBexp_artefact_threshold %cars%             cfg_rej.artfctdef.threshold.artifact = artfctdef.threshold.artifact;%             data  = ft_rejectartifact(cfg_rej,data);%             %             MIBexp_artefact_EOG_ver%             cfg_rej.artfctdef.eog_ver.artifact = artfctdef.eog_ver.artifact;% %             cfg_rej.artfctdef.crittoilim = [zeros(size( data.trialinfo,1),1)-0.7  data.trialinfo(:,8-3)/1200+0.5];% %             data  = ft_rejectartifact(cfg_rej,data);%             %             MIBexp_artefact_EOG_hor%             cfg_rej.artfctdef.eog_hor.artifact = artfctdef.eog_hor.artifact;%             cfg_rej.artfctdef.crittoilim = [zeros(size( data.trialinfo,1),1)-0.7  data.trialinfo(:,8-3)/1200+0.5];%             data  = ft_rejectartifact(cfg_rej,data);% %             MIBexp_artefact_jump%             cfg_rej.artfctdef.jump.artifact = artfctdef.jump.artifact;%             cfg_rej.artfctdef.crittoilim = [zeros(size( data.trialinfo,1),1)-0.7  data.trialinfo(:,8-3)/1200+0.5];%             data  = ft_rejectartifact(cfg_rej,data);   %             %             MIBexp_artefact_muscle %%%% Automatic Artifact detection scripts%             cfg_rej.artfctdef.muscle.artifact = artfctdef.muscle.artifact;%             cfg_rej.artfctdef.crittoilim = [zeros(size( data.trialinfo,1),1)-0.7  data.trialinfo(:,8-3)/1200+0.5];%             data  = ft_rejectartifact(cfg_rej,data);MIBexp_artefact_ECG        end    end    %     preprocinfo=[];%     preprocinfo.artfctdef = artfctdef;%     %     preprocinfo.trlold = data.cfg.trlold;%     %     preprocinfo.trl = data.cfg.previous.previous.trl;%     preprocinfo.trl = data.cfg.trl;            save([outputfile '_heartbeats'], 'artifact');%         %     switch cfg3.resample%         case 'yes'%             data = ft_resampledata(cfg3,data);%             data.cfg.trl = []; %remove trl, is useless after resampling%         case 'no'%             fprintf('NO DOWNSAMPLING APPLIED! \n')%     end%     %     [pathstr, name] = fileparts(outputfile);%     fprintf('Saving %s to...\n %s\n', name, pathstr)%     save(outputfile, 'data');    catch ME    disp(getReport(ME))    fid = fopen(fullfile(cfg1.runcfg.preproc.loaddatapath, 'MIBexp_preproc_errorlog.txt'), 'at');    fprintf(fid,'%s\n%s\n%s\n\n\n', datestr(now), cfg1.datafile, getReport(ME));    fclose('all');end % try